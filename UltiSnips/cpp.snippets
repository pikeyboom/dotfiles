priority -50

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet lic "Quanergy License"
/****************************************************************
 **                                                            **
 **  Copyright(C) `!v strftime("%Y")` Quanergy Systems. All Rights Reserved.  **
 **  Contact: http://www.quanergy.com                          **
 **                                                            **
 ****************************************************************/

endsnippet

snippet ml "vim modeline"
/* vim: set ts=4 sw=4 expandtab : */
endsnippet

# Double namespace. We often begin our classes two namespaces
# deep.
snippet dns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
namespace${2/.+/ /m}${2:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0}
}${2/.+/ \/* /m}$2${2/.+/ *\/ /m}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

# Deprecated headers
snippet dep "Depcrecated Header file"
#ifndef DEPRECATED_${1:HEADER_NAME}_H
#define DEPRECATED_$1_H

#ifdef __DEPRECATED
#warning This header has been deprecated. Use ${2:new_header} instead.

#include <$2>
#endif

#endif // DEPRECATED_$1_H
endsnippet

snippet gtest "GTest C++ template"
#include <gtest/gtest.h>

namespace quanergy
{
	namespace test
	{
		class ${1:TestClassname} : public ::testing::Test
		{
		public:
			${1}() {}
			~${1}() {}

			virtual void SetUp() {}
			virtual void TearDown() {}
		};

		TEST_F(${1}, FirstTest)
		{
		};

	} // test
} // quanergy

int main(int argc, char** argv)
{
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
endsnippet


# vim:ft=snippets:
